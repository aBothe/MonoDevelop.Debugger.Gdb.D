
The code was compiled via dmd -g main
This code was extracted via objdump -S -d main > dump.txt
Only lines that contain the absolute address and assembler instructions will be taken

extern(C) export uint toStr(Object o, char* buffer, uint bufferLength, bool* isException)
{
	if(o is null || buffer is null || bufferLength < 1 || isException is null)
		return 0;
	
	string s;
	try{
		s = o.toString();
		*isException = false;
	}
	catch(Exception e)
	{
		s = e.msg;
		*isException = true;
	}
	
	if(s is null)
		return 0;
	
	if(bufferLength > s.length)
		bufferLength = cast(uint)s.length;
	
	for(auto i=bufferLength-1; i>=0;i--)
		buffer[i] = s[i];
	
	return bufferLength;
}

extern(C) export uint toStr(Object o, char* buffer, uint bufferLength, bool* isException)
  41a1c0:	55                   	push   %rbp
  41a1c1:	48 8b ec             	mov    %rsp,%rbp
  41a1c4:	48 83 ec 48          	sub    $0x48,%rsp
  41a1c8:	53                   	push   %rbx
  41a1c9:	41 54                	push   %r12
  41a1cb:	41 55                	push   %r13
  41a1cd:	41 56                	push   %r14
  41a1cf:	41 57                	push   %r15
  41a1d1:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
  41a1d5:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  41a1d9:	89 55 f0             	mov    %edx,-0x10(%rbp)
  41a1dc:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
{
	if(o is null || buffer is null || bufferLength < 1 || isException is null)
  41a1e0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  41a1e5:	74 14                	je     41a1fb <toStr+0x3b>
  41a1e7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  41a1ec:	74 0d                	je     41a1fb <toStr+0x3b>
  41a1ee:	83 7d f0 01          	cmpl   $0x1,-0x10(%rbp)
  41a1f2:	72 07                	jb     41a1fb <toStr+0x3b>
  41a1f4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  41a1f9:	75 0d                	jne    41a208 <toStr+0x48>
		return 0;
  41a1fb:	31 c0                	xor    %eax,%eax
  41a1fd:	41 5f                	pop    %r15
  41a1ff:	41 5e                	pop    %r14
  41a201:	41 5d                	pop    %r13
  41a203:	41 5c                	pop    %r12
  41a205:	5b                   	pop    %rbx
  41a206:	c9                   	leaveq 
  41a207:	c3                   	retq   
	
	string s;
  41a208:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  41a20f:	00 
  41a210:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  41a217:	00 
	try{
		s = o.toString();
  41a218:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  41a21c:	48 8b 0f             	mov    (%rdi),%rcx
  41a21f:	48 ff 51 08          	rex.W callq *0x8(%rcx)
  41a223:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41a227:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		*isException = false;
  41a22b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41a22f:	c6 02 00             	movb   $0x0,(%rdx)
  41a232:	eb 1b                	jmp    41a24f <toStr+0x8f>
	}
	catch(Exception e)
	{
		s = e.msg;
  41a234:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  41a238:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  41a23c:	48 8b 43 10          	mov    0x10(%rbx),%rax
  41a240:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41a244:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		*isException = true;
  41a248:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  41a24c:	c6 06 01             	movb   $0x1,(%rsi)
	}
	
	if(s is null)
  41a24f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  41a253:	48 0b 4d c0          	or     -0x40(%rbp),%rcx
  41a257:	75 0d                	jne    41a266 <toStr+0xa6>
		return 0;
  41a259:	31 c0                	xor    %eax,%eax
  41a25b:	41 5f                	pop    %r15
  41a25d:	41 5e                	pop    %r14
  41a25f:	41 5d                	pop    %r13
  41a261:	41 5c                	pop    %r12
  41a263:	5b                   	pop    %rbx
  41a264:	c9                   	leaveq 
  41a265:	c3                   	retq   
	
	if(bufferLength > s.length)
  41a266:	8b 5d f0             	mov    -0x10(%rbp),%ebx
  41a269:	48 39 5d c0          	cmp    %rbx,-0x40(%rbp)
  41a26d:	73 06                	jae    41a275 <toStr+0xb5>
		bufferLength = cast(uint)s.length;
  41a26f:	8b 55 c0             	mov    -0x40(%rbp),%edx
  41a272:	89 55 f0             	mov    %edx,-0x10(%rbp)
	
	for(auto i=bufferLength-1; i>=0;i--)
  41a275:	8b 75 f0             	mov    -0x10(%rbp),%esi
  41a278:	ff ce                	dec    %esi
  41a27a:	89 75 d8             	mov    %esi,-0x28(%rbp)
		buffer[i] = s[i];
  41a27d:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  41a280:	48 3b 4d c0          	cmp    -0x40(%rbp),%rcx
  41a284:	72 0a                	jb     41a290 <toStr+0xd0>
  41a286:	bf 1e 00 00 00       	mov    $0x1e,%edi
  41a28b:	e8 18 00 00 00       	callq  41a2a8 <_D4main7__arrayZ>
  41a290:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41a294:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41a298:	8a 1c 0a             	mov    (%rdx,%rcx,1),%bl
  41a29b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  41a29f:	88 1c 31             	mov    %bl,(%rcx,%rsi,1)
		return 0;
	
	if(bufferLength > s.length)
		bufferLength = cast(uint)s.length;
	
	for(auto i=bufferLength-1; i>=0;i--)
  41a2a2:	ff 4d d8             	decl   -0x28(%rbp)
  41a2a5:	eb d6                	jmp    41a27d <toStr+0xbd>
  41a2a7:	90                   	nop

